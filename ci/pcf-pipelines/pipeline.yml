groups:
- name: all
  jobs:
  - bump-patch
  - bump-minor
  - test
  - publish-rc
  - test-rc
  - lock-vsphere
  - destroy-rc-install-pcf-vsphere
  - set-rc-install-pcf-vsphere
  - wipe-vsphere
  - trigger-install-pcf-vsphere
  - lock-gcp
  - destroy-rc-install-pcf-gcp
  - set-rc-install-pcf-gcp
  - wipe-gcp
  - trigger-install-pcf-gcp
  - lock-azure
  - destroy-rc-install-pcf-azure
  - set-rc-install-pcf-azure
  - wipe-azure
  - trigger-install-pcf-azure
  - lock-aws
  - destroy-rc-install-pcf-aws
  - set-rc-install-pcf-aws
  - wipe-aws
  - trigger-install-pcf-aws
  - check-environments-complete
  - publish-release
  - set-rc-lre-gcp-upgrade-ops-manager
  - destroy-rc-lre-gcp-upgrade-ops-manager
  - trigger-rc-lre-gcp-upgrade-ops-manager
  - lock-gcp-lre
  - force-unlock-vsphere-install-pcf
  - force-unlock-gcp-install-pcf
  - force-unlock-gcp-install-pcf
  - force-unlock-azure-install-pcf
  - force-unlock-aws-install-pcf
  - force-unlock-lre-gcp-upgrade-opsman
- name: less
  jobs:
  - bump-patch
  - bump-minor
  - test
  - publish-rc
  - test-rc
  - check-environments-complete
  - publish-release
- name: unlocks
  jobs:
  - force-unlock-vsphere-install-pcf
  - force-unlock-gcp-install-pcf
  - force-unlock-gcp-install-pcf
  - force-unlock-azure-install-pcf
  - force-unlock-aws-install-pcf
  - force-unlock-lre-gcp-upgrade-opsman
- name: install-vsphere
  jobs:
  - force-unlock-vsphere-install-pcf
  - lock-vsphere
  - destroy-rc-install-pcf-vsphere
  - set-rc-install-pcf-vsphere
  - wipe-vsphere
  - trigger-install-pcf-vsphere
  - check-environments-complete
- name: install-gcp
  jobs:
  - force-unlock-gcp-install-pcf
  - lock-gcp
  - destroy-rc-install-pcf-gcp
  - set-rc-install-pcf-gcp
  - wipe-gcp
  - trigger-install-pcf-gcp
  - check-environments-complete
- name: install-azure
  jobs:
  - force-unlock-azure-install-pcf
  - lock-azure
  - destroy-rc-install-pcf-azure
  - set-rc-install-pcf-azure
  - wipe-azure
  - trigger-install-pcf-azure
  - check-environments-complete
- name: install-aws
  jobs:
  - force-unlock-aws-install-pcf
  - lock-aws
  - destroy-rc-install-pcf-aws
  - set-rc-install-pcf-aws
  - wipe-aws
  - trigger-install-pcf-aws
  - check-environments-complete
- name: upgrade-lre-gcp
  jobs:
  - set-rc-lre-gcp-upgrade-ops-manager
  - destroy-rc-lre-gcp-upgrade-ops-manager
  - trigger-rc-lre-gcp-upgrade-ops-manager
  - lock-gcp-lre
  - check-environments-complete
  - force-unlock-lre-gcp-upgrade-opsman

resource_types:
- name: smuggler
  type: docker-image
  source:
    repository: redfactorlabs/concourse-smuggler-resource
    tag: ubuntu

- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: curl
  type: docker-image
  source:
    repository: pivotalservices/concourse-curl-resource
    tag: latest

resources:
- name: rootfs-tag
  type: smuggler
  source:
    commands:
      check: |
        curl https://registry.hub.docker.com/v1/repositories/pcfnorm/rootfs/tags | jq -r .[].name | grep "^v" | sort -V > ${SMUGGLER_OUTPUT_DIR}/versions
      in: |
        echo "${SMUGGLER_VERSION_ID}" > ${SMUGGLER_DESTINATION_DIR}/${SMUGGLER_target_file}
    target_file: tag

- name: pcf-pipelines
  type: git
  source:
    uri: git@github.com:pivotal-cf/pcf-pipelines.git
    branch: master
    private_key: ((git_private_key))

- name: pivnet-rc
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: pcf-automation
    access_key_id: ((pivnet_aws_access_key))
    secret_access_key: ((pivnet_aws_secret_key))
    product_version: .*-rc\.\d+

- name: pivnet-release
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: pcf-automation
    access_key_id: ((pivnet_aws_access_key))
    secret_access_key: ((pivnet_aws_secret_key))

- name: vsphere-lock
  type: pool
  source:
    pool: vsphere
    <<: *norm-ci-locks-params

- name: gcp-lock
  type: pool
  source:
    pool: gcp
    <<: *norm-ci-locks-params

- name: azure-lock
  type: pool
  source:
    pool: azure
    <<: *norm-ci-locks-params

- name: aws-lock
  type: pool
  source:
    pool: aws
    <<: *norm-ci-locks-params

- name: version
  type: semver
  source:
    driver: git
    initial_version: 0.1.0-rc.1
    uri: git@github.com:pivotal-cf/pcf-pipelines.git
    private_key: ((git_private_key))
    branch: version
    file: version

- name: slack
  type: slack-notification
  source:
    url: ((slack_webhook_url))

- name: fly
  type: curl
  source:
    url: "((atc_external_url))/api/v1/cli?arch=amd64&platform=linux"
    filename: fly
    skip_ssl_verification: true

jobs:
- name: force-unlock-vsphere-install-pcf
  serial: true
  plan:
  - get: vsphere-lock
    passed: [ lock-vsphere ]
  - try:
      put: vsphere-lock
      params: {release: vsphere-lock}

- name: force-unlock-gcp-install-pcf
  serial: true
  plan:
  - get: gcp-lock
    passed: [ lock-gcp ]
  - try:
      put: gcp-lock
      params: {release: gcp-lock}

- name: force-unlock-azure-install-pcf
  serial: true
  plan:
  - get: azure-lock
    passed: [ lock-azure ]
  - try:
      put: azure-lock
      params: {release: azure-lock}

- name: force-unlock-aws-install-pcf
  serial: true
  plan:
  - get: aws-lock
    passed: [ lock-aws ]
  - try:
      put: aws-lock
      params: {release: aws-lock}

- name: force-unlock-lre-gcp-upgrade-opsman
  serial: true
  plan:
  - get: gcp-lock
    passed: [ lock-gcp-lre ]
  - try:
      put: gcp-lock
      params: {release: gcp-lock}


- name: bump-patch
  serial_groups: [version]
  plan:
  - put: version
    params: {bump: patch}

- name: bump-minor
  serial_groups: [version]
  plan:
  - put: version
    params: {bump: minor}

- name: test
  on_failure:
    <<: *notify_slack
  plan:
  - get: pcf-pipelines
    trigger: true
  - task: test
    attempts: 3
    file: pcf-pipelines/ci/tasks/test.yml

- name: publish-rc
  serial_groups: [version]
  on_failure:
    <<: *notify_slack
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [test]
    - get: fly
    - get: rootfs-tag

  - put: version
    params: {pre: rc}

  - task: create-release
    file: pcf-pipelines/ci/tasks/create-release/task.yml
    params:
      AVAILABILITY: Admins Only

  - put: pivnet-rc
    params:
      metadata_file: pivnet-metadata/metadata.yml
      file_glob: pcf-pipelines-release-tarball/*.tgz
      s3_filepath_prefix: ((pivnet_s3_filepath_prefix))

  - put: pcf-pipelines
    params:
      repository: pcf-pipelines
      tag: version/version
      tag_prefix: v
      only_tag: true

- name: test-rc
  on_failure:
    <<: *notify_slack
  plan:
  - aggregate:
    - get: version
    - get: src
      resource: pcf-pipelines
      passed: [publish-rc]
    - get: rootfs-tag
      passed: [publish-rc]
  - do:
    - get: pivnet-rc
      trigger: true
      passed: [publish-rc]
    - task: unpack-rc
      file: src/ci/tasks/unpack_tarball.yml
      input_mapping: { tarball: pivnet-rc }
      output_mapping: { unpacked_tarball: pcf-pipelines-release }

  - task: prepare-workspace
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: pcfnorm/rootfs
      inputs:
      - name: src
      - name: pcf-pipelines-release
      outputs:
      - name: pcf-pipelines
      run:
        path: bash
        args:
        - -c
        - |
          cp -r src/*.go pcf-pipelines
          cp -r pcf-pipelines-release/pcf-pipelines/* pcf-pipelines

  - task: test
    file: src/ci/tasks/test.yml

########### VSPHERE

- name: lock-vsphere
  serial: true
  plan:
  - aggregate: &lock-resources
    - get: pivnet-rc
      passed: [test-rc]
      trigger: true
    - get: pcf-pipelines
      passed: [test-rc]
    - get: rootfs-tag
      passed: [test-rc]

  - put: vsphere-lock
    params: { claim: install-pcf }
    timeout: 3h00m

- name: destroy-rc-install-pcf-vsphere
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ lock-vsphere ]
    - get: vsphere-lock
      passed: [ lock-vsphere ]
      trigger: true
    - get: pivnet-rc
      passed: [ lock-vsphere ]
    - get: rootfs-tag
      passed: [ lock-vsphere ]
  - task: destroy-rc-install-pcf-vsphere
    params:
      PIPELINE_NAME: rc-install-pcf-vsphere
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/destroy_pipeline.yml

- name: set-rc-install-pcf-vsphere
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ destroy-rc-install-pcf-vsphere ]
    - get: vsphere-lock
      passed: [ destroy-rc-install-pcf-vsphere ]
      trigger: true
    - get: pivnet-rc
      passed: [ destroy-rc-install-pcf-vsphere ]
    - get: rootfs-tag
      passed: [ destroy-rc-install-pcf-vsphere ]
  - task: unpack-rc
    file: pcf-pipelines/ci/tasks/unpack_tarball.yml
    input_mapping: { tarball: pivnet-rc }
    output_mapping: { unpacked_tarball: release }
  - task: set-rc-install-pcf-vsphere
    params:
      PIPELINE_PARAMS: ((rc_vsphere_install_params))
      PIPELINE_NAME: rc-install-pcf-vsphere
      PIPELINE_PATH: release/pcf-pipelines/install-pcf/vsphere/pipeline.yml
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/set_pipeline.yml
  - task: unpause-rc-install-pcf-vsphere
    params:
      PIPELINE_NAME: rc-install-pcf-vsphere
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/unpause_pipeline.yml

- name: wipe-vsphere
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ set-rc-install-pcf-vsphere ]
    - get: vsphere-lock
      passed: [ set-rc-install-pcf-vsphere ]
      trigger: true
    - get: pivnet-rc
      passed: [ set-rc-install-pcf-vsphere ]
    - get: rootfs-tag
      passed: [ set-rc-install-pcf-vsphere ]
  - task: trigger-vsphere-rc-wipe-env
    file: pcf-pipelines/tasks/trigger-jobs/task.yml
    params:
      <<: *atc_creds
      JOBS: |
        rc-install-pcf-vsphere/wipe-env
  on_failure:
    <<: *notify_slack

- name: trigger-install-pcf-vsphere
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ wipe-vsphere ]
    - get: vsphere-lock
      passed: [ wipe-vsphere ]
      trigger: true
    - get: pivnet-rc
      passed: [ wipe-vsphere ]
    - get: rootfs-tag
      passed: [ wipe-vsphere ]
  - task: trigger-vsphere-rc-deploy-opsman
    file: pcf-pipelines/tasks/trigger-jobs/task.yml
    params:
      <<: *atc_creds
      JOBS: |
        rc-install-pcf-vsphere/deploy-opsman
  on_failure:
    <<: *notify_slack

####### END VSPHERE
########### GCP

- name: lock-gcp
  serial: true
  plan:
  - aggregate: *lock-resources
  - put: gcp-lock
    params: { claim: install-pcf }
    timeout: 3h00m

- name: destroy-rc-install-pcf-gcp
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [lock-gcp]
    - get: gcp-lock
      passed: [lock-gcp]
      trigger: true
    - get: pivnet-rc
      passed: [lock-gcp]
    - get: rootfs-tag
      passed: [lock-gcp]
  - task: destroy-rc-install-pcf-gcp
    params:
      PIPELINE_NAME: rc-install-pcf-gcp
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/destroy_pipeline.yml

- name: set-rc-install-pcf-gcp
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ destroy-rc-install-pcf-gcp ]
    - get: gcp-lock
      passed: [ destroy-rc-install-pcf-gcp ]
      trigger: true
    - get: pivnet-rc
      passed: [ destroy-rc-install-pcf-gcp ]
    - get: rootfs-tag
      passed: [ destroy-rc-install-pcf-gcp ]
  - task: unpack-rc
    file: pcf-pipelines/ci/tasks/unpack_tarball.yml
    input_mapping: { tarball: pivnet-rc }
    output_mapping: { unpacked_tarball: release }
  - task: set-rc-install-pcf-gcp
    params:
      PIPELINE_PARAMS: ((rc_gcp_install_params))
      PIPELINE_NAME: rc-install-pcf-gcp
      PIPELINE_PATH: release/pcf-pipelines/install-pcf/gcp/pipeline.yml
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/set_pipeline.yml
  - task: unpause-rc-install-pcf-gcp
    params:
      PIPELINE_NAME: rc-install-pcf-gcp
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/unpause_pipeline.yml

- name: wipe-gcp
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ set-rc-install-pcf-gcp ]
    - get: gcp-lock
      passed: [ set-rc-install-pcf-gcp ]
      trigger: true
    - get: pivnet-rc
      passed: [ set-rc-install-pcf-gcp ]
    - get: rootfs-tag
      passed: [ set-rc-install-pcf-gcp ]
  - task: trigger-gcp-rc-wipe-env
    file: pcf-pipelines/tasks/trigger-jobs/task.yml
    params:
      <<: *atc_creds
      JOBS: |
        rc-install-pcf-gcp/wipe-env
  on_failure:
    <<: *notify_slack

- name: trigger-install-pcf-gcp
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ wipe-gcp ]
    - get: gcp-lock
      passed: [ wipe-gcp ]
      trigger: true
    - get: pivnet-rc
      passed: [ wipe-gcp ]
    - get: rootfs-tag
      passed: [ wipe-gcp ]
  - task: trigger-gcp-rc-upload-opsman-image
    file: pcf-pipelines/tasks/trigger-jobs/task.yml
    params:
      <<: *atc_creds
      JOBS: |
        rc-install-pcf-gcp/upload-opsman-image
  - task: trigger-gcp-rc-create-infrastructure
    file: pcf-pipelines/tasks/trigger-jobs/task.yml
    params:
      <<: *atc_creds
      JOBS: |
        rc-install-pcf-gcp/create-infrastructure
  - task: delegate-dns-zone
    file: pcf-pipelines/ci/tasks/delegate-gcp-dns-zone/task.yml
    params:
      GCP_SERVICE_ACCOUNT_KEY: ((gcp_service_account_key))
      PARENT_DNS_ZONE: ((gcp_parent_dns_zone))
      CHILD_DNS_ZONE: ((gcp_child_dns_zone))
  - task: trigger-gcp-rc-configure-director
    file: pcf-pipelines/tasks/trigger-jobs/task.yml
    params:
      <<: *atc_creds
      JOBS: |
        rc-install-pcf-gcp/configure-director
  on_failure:
    <<: *notify_slack

####### END GCP

####### GCP LRE
- name: lock-gcp-lre
  serial: true
  plan:
  - aggregate: *lock-resources
  - put: gcp-lock
    params: { claim: upgrade-opsmgr }
    timeout: 3h00m

- name: destroy-rc-lre-gcp-upgrade-ops-manager
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ lock-gcp-lre ]
    - get: gcp-lock
      passed: [lock-gcp-lre]
      trigger: true
    - get: pivnet-rc
      passed: [ lock-gcp-lre ]
    - get: rootfs-tag
      passed: [ lock-gcp-lre ]
  - task: destroy-rc-install-pcf-gcp
    params:
      PIPELINE_NAME: rc-lre-gcp-upgrade-ops-manager
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/destroy_pipeline.yml
  on_failure:
    <<: *notify_slack

- name: set-rc-lre-gcp-upgrade-ops-manager
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ destroy-rc-lre-gcp-upgrade-ops-manager ]
    - get: gcp-lock
      passed: [destroy-rc-lre-gcp-upgrade-ops-manager]
      trigger: true
    - get: pivnet-rc
      passed: [ destroy-rc-lre-gcp-upgrade-ops-manager ]
    - get: rootfs-tag
      passed: [ destroy-rc-lre-gcp-upgrade-ops-manager ]
  - task: unpack-rc
    file: pcf-pipelines/ci/tasks/unpack_tarball.yml
    input_mapping: { tarball: pivnet-rc }
    output_mapping: { unpacked_tarball: release }
  - task: set-rc-install-pcf-gcp
    params:
      PIPELINE_PARAMS: ((rc_lre_gcp_upgrade_ops_manager_params))
      PIPELINE_NAME: rc-lre-gcp-upgrade-ops-manager
      PIPELINE_PATH: release/pcf-pipelines/upgrade-ops-manager/gcp/pipeline.yml
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/set_pipeline.yml
  - task: unpause-rc-install-pcf-gcp
    params:
      PIPELINE_NAME: rc-lre-gcp-upgrade-ops-manager
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/unpause_pipeline.yml
  on_failure:
    <<: *notify_slack

- name: trigger-rc-lre-gcp-upgrade-ops-manager
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ set-rc-lre-gcp-upgrade-ops-manager ]
    - get: gcp-lock
      passed: [ set-rc-lre-gcp-upgrade-ops-manager ]
      trigger: true
    - get: pivnet-rc
      passed: [ set-rc-lre-gcp-upgrade-ops-manager ]
    - get: rootfs-tag
      passed: [ set-rc-lre-gcp-upgrade-ops-manager ]
  - task: trigger-opsman
    file: pcf-pipelines/tasks/trigger-jobs/task.yml
    params:
      <<: *atc_creds
      JOBS: |
        rc-lre-gcp-upgrade-ops-manager/upgrade-opsmgr
  on_failure:
    <<: *notify_slack

####### END GCP LRE

####### Azure

- name: lock-azure
  serial: true
  plan:
  - aggregate: *lock-resources
  - put: azure-lock
    params: { claim: install-pcf }
    timeout: 3h00m

- name: destroy-rc-install-pcf-azure
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [lock-azure]
    - get: azure-lock
      passed: [lock-azure]
      trigger: true
    - get: pivnet-rc
      passed: [lock-azure]
    - get: rootfs-tag
      passed: [lock-azure]
  - task: destroy-rc-install-pcf-azure
    params:
      PIPELINE_NAME: rc-install-pcf-azure
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/destroy_pipeline.yml

- name: set-rc-install-pcf-azure
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ destroy-rc-install-pcf-azure ]
    - get: azure-lock
      passed: [ destroy-rc-install-pcf-azure ]
      trigger: true
    - get: pivnet-rc
      passed: [ destroy-rc-install-pcf-azure ]
    - get: rootfs-tag
      passed: [ destroy-rc-install-pcf-azure ]
  - task: unpack-rc
    file: pcf-pipelines/ci/tasks/unpack_tarball.yml
    input_mapping: { tarball: pivnet-rc }
    output_mapping: { unpacked_tarball: release }
  - task: set-rc-install-pcf-azure
    params:
      PIPELINE_PARAMS: ((rc_azure_install_params))
      PIPELINE_NAME: rc-install-pcf-azure
      PIPELINE_PATH: release/pcf-pipelines/install-pcf/azure/pipeline.yml
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/set_pipeline.yml
  - task: unpause-rc-install-pcf-azure
    params:
      PIPELINE_NAME: rc-install-pcf-azure
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/unpause_pipeline.yml

- name: wipe-azure
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ set-rc-install-pcf-azure ]
    - get: azure-lock
      passed: [ set-rc-install-pcf-azure ]
      trigger: true
    - get: pivnet-rc
      passed: [ set-rc-install-pcf-azure ]
    - get: rootfs-tag
      passed: [ set-rc-install-pcf-azure ]
  - task: trigger-azure-rc-wipe-env
    file: pcf-pipelines/tasks/trigger-jobs/task.yml
    params:
      <<: *atc_creds
      JOBS: |
        rc-install-pcf-azure/wipe-env
  on_failure:
    <<: *notify_slack

- name: trigger-install-pcf-azure
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ wipe-azure ]
    - get: azure-lock
      passed: [ wipe-azure ]
      trigger: true
    - get: pivnet-rc
      passed: [ wipe-azure ]
    - get: rootfs-tag
      passed: [ wipe-azure ]
  - task: trigger-azure-rc-create-infrastructure
    file: pcf-pipelines/tasks/trigger-jobs/task.yml
    params:
      <<: *atc_creds
      JOBS: |
        rc-install-pcf-azure/create-infrastructure
  - task: delegate-dns-zone
    file: pcf-pipelines/ci/tasks/delegate-azure-dns-zone/task.yml
    params:
      AZURE_CLIENT_ID: ((azure_client_id))
      AZURE_CLIENT_SECRET: ((azure_client_secret))
      AZURE_TENANT_ID: ((azure_tenant_id))
      PARENT_RESOURCE_GROUP: ((azure_parent_dns_resource_group))
      PARENT_DNS_ZONE: ((azure_parent_dns_zone))
      CHILD_RESOURCE_GROUP: ((azure_child_dns_resource_group))
      CHILD_DNS_ZONE_NAME: ((azure_child_dns_zone_name))
  - task: trigger-azure-rc-config-opsman-auth
    file: pcf-pipelines/tasks/trigger-jobs/task.yml
    params:
      <<: *atc_creds
      JOBS: |
        rc-install-pcf-azure/config-opsman-auth
  - task: trigger-azure-rc-config-director
    file: pcf-pipelines/tasks/trigger-jobs/task.yml
    params:
      <<: *atc_creds
      JOBS: |
        rc-install-pcf-azure/config-director
  on_failure:
    <<: *notify_slack

####### END Azure
####### AWS

- name: lock-aws
  serial: true
  plan:
  - aggregate: *lock-resources
  - put: aws-lock
    params: { claim: install-pcf }
    timeout: 3h00m

- name: destroy-rc-install-pcf-aws
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [lock-aws]
    - get: aws-lock
      passed: [lock-aws]
      trigger: true
    - get: pivnet-rc
      passed: [lock-aws]
    - get: rootfs-tag
      passed: [lock-aws]
  - task: destroy-rc-install-pcf-aws
    params:
      PIPELINE_NAME: rc-install-pcf-aws
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/destroy_pipeline.yml

- name: set-rc-install-pcf-aws
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ destroy-rc-install-pcf-aws ]
    - get: aws-lock
      passed: [ destroy-rc-install-pcf-aws ]
      trigger: true
    - get: pivnet-rc
      passed: [ destroy-rc-install-pcf-aws ]
    - get: rootfs-tag
      passed: [ destroy-rc-install-pcf-aws ]
  - task: unpack-rc
    file: pcf-pipelines/ci/tasks/unpack_tarball.yml
    input_mapping: { tarball: pivnet-rc }
    output_mapping: { unpacked_tarball: release }
  - task: set-rc-install-pcf-aws
    params:
      PIPELINE_PARAMS: ((rc_aws_install_params))
      PIPELINE_NAME: rc-install-pcf-aws
      PIPELINE_PATH: release/pcf-pipelines/install-pcf/aws/pipeline.yml
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/set_pipeline.yml
  - task: unpause-rc-install-pcf-aws
    params:
      PIPELINE_NAME: rc-install-pcf-aws
      <<: *atc_creds
    file: pcf-pipelines/ci/tasks/unpause_pipeline.yml

- name: wipe-aws
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ set-rc-install-pcf-aws ]
    - get: aws-lock
      passed: [ set-rc-install-pcf-aws ]
      trigger: true
    - get: pivnet-rc
      passed: [ set-rc-install-pcf-aws ]
    - get: rootfs-tag
      passed: [ set-rc-install-pcf-aws ]
  - task: trigger-aws-rc-wipe-env
    file: pcf-pipelines/tasks/trigger-jobs/task.yml
    params:
      <<: *atc_creds
      JOBS: |
        rc-install-pcf-aws/wipe-env
  on_failure:
    <<: *notify_slack

- name: trigger-install-pcf-aws
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed: [ wipe-aws ]
    - get: aws-lock
      passed: [ wipe-aws ]
      trigger: true
    - get: pivnet-rc
      passed: [ wipe-aws ]
    - get: rootfs-tag
      passed: [ wipe-aws ]
  - task: trigger-aws-rc-create-infrastructure
    file: pcf-pipelines/tasks/trigger-jobs/task.yml
    params:
      <<: *atc_creds
      JOBS: |
        rc-install-pcf-aws/create-infrastructure
  on_failure:
    <<: *notify_slack

####### END AWS

- name: check-environments-complete
  serial: true
  plan:
  - aggregate:
    - get: pcf-pipelines
      passed:
      - trigger-install-pcf-gcp
      - trigger-install-pcf-vsphere
      - trigger-install-pcf-azure
      - trigger-install-pcf-aws
      - trigger-rc-lre-gcp-upgrade-ops-manager
    - get: pivnet-rc
      passed:
      - trigger-install-pcf-gcp
      - trigger-install-pcf-vsphere
      - trigger-install-pcf-azure
      - trigger-install-pcf-aws
      - trigger-rc-lre-gcp-upgrade-ops-manager
      trigger: true
    - get: rootfs-tag
      passed:
      - trigger-install-pcf-gcp
      - trigger-install-pcf-vsphere
      - trigger-install-pcf-azure
      - trigger-install-pcf-aws
      - trigger-rc-lre-gcp-upgrade-ops-manager
  - aggregate:
    - do:
      - task: check-lre-gcp
        file: pcf-pipelines/ci/tasks/check-environments/task.yml
        params:
          PIPELINE: trigger-rc-lre-gcp-upgrade-ops-manager
          JOB: upgrade-opsmgr
          TIMEOUT_MINUTES: 240
          DISABLE_PIVNET_VERSION_CHECK: false
          <<: *atc_creds
      - get: lre-gcp-lock
        resource: gcp-lock
        passed: [trigger-rc-lre-gcp-upgrade-ops-manager]
      - try:
          put: lre-gcp-lock
          resource: gcp-lock
          params: {release: lre-gcp-lock}
    - do:
      - task: check-vsphere
        file: pcf-pipelines/ci/tasks/check-environments/task.yml
        params:
          PIPELINE: rc-install-pcf-vsphere
          JOB: deploy-ert
          TIMEOUT_MINUTES: 240
          DISABLE_PIVNET_VERSION_CHECK: false
          <<: *atc_creds
      - get: vsphere-lock
        passed: [ trigger-install-pcf-vsphere ]
      - try:
          put: vsphere-lock
          params: {release: vsphere-lock}
    - do:
      - task: check-gcp
        file: pcf-pipelines/ci/tasks/check-environments/task.yml
        params:
          PIPELINE: rc-install-pcf-gcp
          JOB: deploy-ert
          TIMEOUT_MINUTES: 240
          DISABLE_PIVNET_VERSION_CHECK: false
          <<: *atc_creds
      - get: gcp-lock
        passed: [ trigger-install-pcf-gcp ]
      - try:
          put: gcp-lock
          params: {release: gcp-lock}
    - do:
      - task: check-azure
        file: pcf-pipelines/ci/tasks/check-environments/task.yml
        params:
          PIPELINE: rc-install-pcf-azure
          JOB: deploy-ert
          TIMEOUT_MINUTES: 240
          DISABLE_PIVNET_VERSION_CHECK: false
          <<: *atc_creds
      - get: azure-lock
        passed: [ trigger-install-pcf-azure ]
      - try:
          put: azure-lock
          params: {release: azure-lock}
    - do:
      - task: check-aws
        file: pcf-pipelines/ci/tasks/check-environments/task.yml
        params:
          PIPELINE: rc-install-pcf-aws
          JOB: deploy-ert
          TIMEOUT_MINUTES: 240
          DISABLE_PIVNET_VERSION_CHECK: false
          <<: *atc_creds
      - get: aws-lock
        passed: [ trigger-install-pcf-aws ]
      - try:
          put: aws-lock
          params: {release: aws-lock}

- name: publish-release
  serial_groups: [version]
  plan:
  - aggregate:
    - get: version
      params: {bump: final}
    - get: pcf-pipelines
      passed: [check-environments-complete]
    - get: pivnet-rc
      passed: [check-environments-complete]
    - get: fly
    - get: rootfs-tag
  - task: create-release
    file: pcf-pipelines/ci/tasks/create-release/task.yml
    params:
      AVAILABILITY: Selected User Groups Only

  - put: pivnet-release
    params:
      metadata_file: pivnet-metadata/metadata.yml
      file_glob: pcf-pipelines-release-tarball/*.tgz
      s3_filepath_prefix: ((pivnet_s3_filepath_prefix))

  - put: pcf-pipelines
    params:
      repository: pcf-pipelines
      tag: version/version
      tag_prefix: v
      only_tag: true

  on_failure:
    <<: *notify_slack
  on_success:
    do:
    - task: create-slack-notification
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: concourse/buildroot
            tag: curl
        inputs:
        - name: pivnet-release
        outputs:
        - name: notification-text
        run:
          path: bash
          args:
          - -c
          - |
            set -eu

            release_id=$(cat pivnet-release/metadata.json | jq .Release.ID)
            cat > notification-text/text <<EOF
              Deployed pcf-pipelines final release to https://network.pivotal.io/products/pcf-automation#/releases/$release_id
            EOF
    - put: slack
      params:
        text_file: notification-text/text
        silent: true

    - put: version
      params: {bump: final}

    - put: version
      params: {bump: patch, pre: rc}

atc_creds: &atc_creds
  ATC_EXTERNAL_URL: ((atc_external_url))
  ATC_BASIC_AUTH_USERNAME: ((fly_basic_auth_username))
  ATC_BASIC_AUTH_PASSWORD: ((fly_basic_auth_password))
  ATC_TEAM_NAME: ((atc_team_name))

notify_slack: &notify_slack
  put: slack
  params:
    text: "$BUILD_PIPELINE_NAME/$BUILD_JOB_NAME failed: $ATC_EXTERNAL_URL/builds/$BUILD_ID"

norm-ci-locks-params: &norm-ci-locks-params
  uri: git@github.com:pivotal-cf/norm-ci-locks.git
  branch: master
  private_key: ((locks_git_ssh_key))
  retry_delay: 1m
