resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: schedule
  type: time
  source:
    interval: 30m
    start: "12:00 AM"
    stop: "11:59 PM"
    location: America/Los_Angeles
    days: [Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday]

jobs:
- name: regulator
  plan:
  - aggregate:
    - get: schedule
      trigger: true
- name: upload-stemcell
  plan:
  - get: schedule
    trigger: true
    passed: [ regulator ]
  - task: upload-stemcell
    params:
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
      API_TOKEN: ((pivnet_token))
      IAAS_TYPE: ((iaas))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: czero/cflinuxfs2}
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash

          set -eu

          ROOT="${PWD}"

          function main() {
            if [[ -z "${IAAS_TYPE}" ]]; then abort "The required env var IAAS_TYPE was not set"; fi

            local stemcell_versions="$(get_stemcell_versions)"
            echo "Stemcell Versions:"
            echo "${stemcell_versions}"

            pivnet-cli login --api-token="${API_TOKEN}"
            pivnet-cli eula --eula-slug=pivotal_software_eula > /dev/null

            local download_dir="${ROOT}/stemcells"
            mkdir -p "${download_dir}"

            for stemcell_version in ${stemcell_versions}; do
              download_stemcell_version "${stemcell_version}"
            done

            for stemcell in $(ls ${download_dir}/*.tgz); do
              echo "Uploading ${stemcell} to https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}"
              om \
                upload-stemcell --stemcell "${stemcell}"
            done
          }

          function om() {
            om-linux \
              --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
              --skip-ssl-validation \
              --username "${OPSMAN_USERNAME}" \
              --password "${OPSMAN_PASSWORD}" \
              $@
          }

          function get_stemcell_versions() {
            om \
              curl \
              --path /api/v0/pivotal_network/stemcell_updates | \
              jq -r '.stemcell_updates | .[].stemcell_version'
          }

          function get_product_file_ids() {
            local stemcell_version="${1}"
            pivnet-cli product-files \
              -p stemcells \
              -r "${stemcell_version}" \
              --format json | \
              jq .[].id
          }

          function download_stemcell_version() {
            local stemcell_version="${1}"
            local product_file_ids="$(get_product_file_ids "$stemcell_version")"
            for product_file_id in ${product_file_ids}; do
              local product_file_name="$(pivnet-cli product-file -p stemcells -r "${stemcell_version}" -i "${product_file_id}" --format=json | jq .name)"
              if [[ -n $(echo "${product_file_name}" | grep -i "${IAAS_TYPE}") ]]; then
                echo "Downloading ${stemcell_version} from PivNet"
                pivnet-cli download-product-files \
                  -p stemcells \
                  -r "${stemcell_version}" \
                  -i "${product_file_id}" \
                  -d "${download_dir}" \
                  --accept-eula
                return 0
              fi
            done
          }

          main

- name: apply-updates
  plan:
  - get: schedule
    passed: [ upload-stemcell ]
    trigger: true
  - task: apply-updates
    params:
      OPSMAN_DOMAIN_OR_IP_ADDRESS: ((opsman_domain_or_ip_address))
      OPSMAN_USERNAME: ((opsman_admin_username))
      OPSMAN_PASSWORD: ((opsman_admin_password))
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: czero/cflinuxfs2}
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash

          set -eu

          function om() {
            om-linux \
              --target "https://${OPSMAN_DOMAIN_OR_IP_ADDRESS}" \
              --skip-ssl-validation \
              --username "${OPSMAN_USERNAME}" \
              --password "${OPSMAN_PASSWORD}" \
              $@
          }

          function stage_product() {
            om stage-product --product-name $1 --product-version $2
          }

          available_products=$(om curl -path "/api/v0/available_products")
          staged_products=$(om curl -path "/api/v0/staged/products")

          to_stage=$(
            jq --null-input \
            --raw-output \
            --argjson available "$available_products" \
            --argjson staged "$staged_products" \
            '
            # Collect available versions of each product
            reduce $available[] as $o ({};
              .[$o.name] = .[$o.name] + [$o.product_version | split("-")[0] | split("+")[0]]
            )

            # Find the latest version of each product
            | map_values(
                map(split(".") | map(tonumber))
                | transpose | transpose | max | map(tostring) | join(".")
              )

            # Filter latest available version to only those that do not match
            # the staged version
            | reduce to_entries[] as $entry ([];
                if any($staged[]; select(.type == $entry.key and .product_version != $entry.value)) then
                  . + ["\($entry.key) \($entry.value)"]
                else
                  .
                end
              )

            | join("\n")'
          )

          if [[ -z "$to_stage" ]]; then
            echo Nothing to do.
            exit 0
          fi

          for stageable in "$to_stage"; do
            stage_product ${stageable}
          done

          om apply-changes --ignore-warnings
